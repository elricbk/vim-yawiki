Given (Basic formatting):
  **bold**
  //italic//
  __underline__

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual SyntaxAt(1, 1), 'yawikiBold'
  AssertEqual SyntaxAt(2, 1), 'yawikiItalic'
  AssertEqual SyntaxAt(3, 1), 'yawikiUnderline'

Given (All level headers):
  = First level header
  == Second level header
  === Third level header
  ==== Fourth level header
  ===== Fifth level header
  ====== Sixth level header

Execute (Set filetype):
  set filetype=yawiki

Then (All headers have expected syntax):
  for i in range(1, 6)
    AssertEqual SyntaxAt(i, 1), 'yawikiH' . i
  endfor

Given (Multiline code snippet):
  %%(cpp)
  int i = 0;
  %%

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  for i in range(1, line('$'))
    AssertEqual SyntaxAt(i, 1), 'yawikiCode'
  endfor

Given (Multiline raw HTML):
  <#
  <a href="test.html">This is a test</a>
  #>

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  for i in range(1, line('$'))
    AssertEqual SyntaxAt(i, 1), 'yawikiHtml'
  endfor

Given (Cut open/close):
  <{ Hidden region of text
  Blah-blah
  }>

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual SyntaxAt(1, 1), 'yawikiCutOpen'
  AssertEqual SyntaxAt(3, 1), 'yawikiCutClose'

Given (More basic formatting):
  ##Monospaced## font
  --Strikeout-- text
  ++Small++ text
  {{Some command}} with text

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual SyntaxAt(1, 1), 'yawikiMonospaced'
  AssertEqual SyntaxAt(1, len(getline(1)) - 1), ''
  AssertEqual SyntaxAt(2, 1), 'yawikiStrikeout'
  AssertEqual SyntaxAt(2, len(getline(1)) - 1), ''
  AssertEqual SyntaxAt(3, 1), 'yawikiSmall'
  AssertEqual SyntaxAt(3, len(getline(1)) - 1), ''

Given (Example of escaping):
  g+""""+-4.7
  g++-4.7

Execute (Set filetype):
  set filetype=yawiki

Then (No escaped formatting should be present):
  AssertEqual SyntaxAt(1, len(getline(1)) - 1), ''
  AssertEqual SyntaxAt(2, len(getline(2)) - 1), 'yawikiSmall'

Given (String containing "C++"):
  c++-4.7 is cool
  C++-4.7 is cool
  g++-4.7 is not so cool

Execute (Set filetype):
  set filetype=yawiki

Then ('small' formatting should not be started):
  AssertEqual SyntaxAt(1, len(getline(1)) - 1), ''
  AssertEqual SyntaxAt(2, len(getline(2)) - 1), ''
  AssertEqual SyntaxAt(3, len(getline(3)) - 1), 'yawikiSmall'

Given (Links in different formats):
  http://ya.ru
  https://ya.ru
  ((google.com ololo))
  [[yahoo.com ururu]]

Execute (Set filetype):
  set filetype=yawiki

Then (All link parts have correct syntax):
  AssertEqual SyntaxAt(1, 1), 'yawikiInlineURL'
  AssertEqual SyntaxAt(2, 1), 'yawikiInlineURL'
  AssertEqual SyntaxOf('(('), 'yawikiDelim'
  AssertEqual SyntaxOf('google\.com'), 'yawikiLink'
  AssertEqual SyntaxOf('ololo'), 'yawikiLinkTitle'
  AssertEqual SyntaxOf('))'), 'yawikiDelim'
  AssertEqual SyntaxOf('[['), 'yawikiDelim'
  AssertEqual SyntaxOf('yahoo\.com'), 'yawikiLink'
  AssertEqual SyntaxOf('ururu'), 'yawikiLinkTitle'
  AssertEqual SyntaxOf(']]'), 'yawikiDelim'

Given (Command syntax on single line):
  {{test}}

Execute (Set filetype):
  set filetype=yawiki

Then (Syntax is set to command):
  AssertEqual SyntaxOf('test'), 'yawikiCommand'

Given (Command syntax on multiple lines):
  {{
    test
  }}

Execute (Set filetype):
  set filetype=yawiki

Then (Syntax is not set to command):
  AssertEqual SyntaxOf('test'), ''

Given (Question and notes):
  ??Question??
  !!Note!!
  !!(green)GreenNote!!
  !!(red)RedNote!!
  !!(blue)BlueNote!!
  !!(yellow)YellowNote!!
  !!(gray)GrayNote!!
  !!(grey)GreyNote!!

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual SyntaxOf('Question'), 'yawikiQuestion'
  AssertEqual SyntaxOf('Note'), 'yawikiNote'
  AssertEqual SyntaxOf('GreenNote'), 'yawikiGreenNote'
  AssertEqual SyntaxOf('RedNote'), 'yawikiRedNote'
  AssertEqual SyntaxOf('BlueNote'), 'yawikiBlueNote'
  AssertEqual SyntaxOf('YellowNote'), 'yawikiYellowNote'
  AssertEqual SyntaxOf('GrayNote'), 'yawikiGrayNote'
  AssertEqual SyntaxOf('GreyNote'), 'yawikiGrayNote'

Given (Simple login):
  abcd@

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  AssertEqual SyntaxOf('a'), 'yawikiLoginFirstLetter'
  AssertEqual SyntaxOf('bcd@'), 'yawikiLogin'

Given (Twitter-style login):
  @abcd

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  AssertEqual SyntaxOf('@'), 'yawikiLoginAt'
  AssertEqual SyntaxOf('abcd'), 'yawikiReversedLogin'

Given (Login inflection):
  кто:abc
  кого:abc
  кому:abc
  оком:abc

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  for i in range(1, line('$'))
    AssertEqual SyntaxAt(i, 1), 'yawikiLoginInflection'
    AssertEqual SyntaxAt(i, len(getline(i)) - 1), 'yawikiInlineLogin'
    AssertEqual SyntaxOf(':\zs\w', i), 'yawikiLoginFirstLetter'
  endfor

Given (Quotes in different formats):
  <[
    MultilineQuote
  ]>
  >>> Quote3
  >>  Quote2
  >   Quote1

Execute (Set filetype):
  set filetype=yawiki

Then (All items have expected syntax):
  AssertEqual SyntaxOf('MultilineQuote'), 'yawikiQuote'
  AssertEqual SyntaxOf('Quote1'), 'yawikiQuote1'
  AssertEqual SyntaxOf('Quote2'), 'yawikiQuote2'
  AssertEqual SyntaxOf('Quote3'), 'yawikiQuoteMore'

Given (Multiple lines of dashes):
    ---
    ----
    -------------

Execute (FIXME: Set filetype):
  set filetype=yawiki

Then (Line with 4 or more dashes has separator syntax):
  AssertEqual SyntaxAt(1, 1), ''
  AssertEqual SyntaxAt(2, 1), 'yawikiSeparator'
  AssertEqual SyntaxAt(3, 1), 'yawikiSeparator'

Given (Definition for term without spaces):
  (?Термин Определение с пробелами?)

Execute (Set filetype):
  set filetype=yawiki

Then (All definition parts have expected syntax):
  AssertEqual SyntaxOf('(?'), 'yawikiDefMarker'
  AssertEqual SyntaxOf('?)'), 'yawikiDefMarker'
  AssertEqual SyntaxOf('Термин'), 'yawikiDefMarker'
  AssertEqual SyntaxOf('Определение'), 'yawikiDef'

Given (Different ticket numbers):
  TICKET-42
  notticket1
  NOTTICKET2-42
  NOTTICKET3 42

Execute (Set filetype):
  set filetype=yawiki

Then (Correctly formatted ticket has ticket syntax):
  AssertEqual SyntaxOf('TICKET'), 'yawikiTicket'
  AssertEqual SyntaxOf('notticket1'), ''
  AssertEqual SyntaxOf('NOTTICKET2'), ''
  AssertEqual SyntaxOf('NOTTICKET3'), ''

Given (HTML entities):
  &mdash;
  &#4242;

Execute (Set filetype):
  set filetype=yawiki

Then (Entities have expected syntax):
  AssertEqual SyntaxOf('&', 1), 'yawikiHtmlEntity'
  AssertEqual SyntaxOf('&', 2), 'yawikiHtmlEntity'

# FIXME: could be expanded to separate tests to more precise checks
Given (Some lists with bullets):
  * Unordered list
    * Second level list
  - Unordered list other format
  1. Ordered list with numbers
  A. Ordered list with big letters
  b. Ordered list with small letters
  2.#42 Ordered list with overriden number
  3.+ Collapsed ordered list item
  XII. Ordered list with roman numerals

Execute (Set filetype):
  set filetype=yawiki

Then (All list bullets/numbers have list bullet syntax):
  for i in range(1, line('$'))
    AssertEqual SyntaxOf('^\s*\zs\S\+', i), 'yawikiListBullet', getline(i)
  endfor

Given (Table formatting):
  #|
  || Table | ##with## | borders ||
  |#

  #||
  || **Borderless** | table ||
  ||#

Execute (Set filetype):
  set filetype=yawiki

Then (Table borders have expected syntax, formatting is supported):
  AssertEqual SyntaxOf('^#|'), 'yawikiDelim'
  AssertEqual SyntaxOf('^|#'), 'yawikiDelim'
  AssertEqual SyntaxOf('^#||'), 'yawikiDelim'
  AssertEqual SyntaxOf('^||#'), 'yawikiDelim'
  AssertEqual SyntaxOf('^\zs||\ze[^#]', 1), 'yawikiTableOuterBorder'
  AssertEqual SyntaxOf('[^#]\zs||\ze$', 1), 'yawikiTableOuterBorder'
  AssertEqual SyntaxOf('^\zs||\ze[^#]', 2), 'yawikiTableOuterBorder'
  AssertEqual SyntaxOf('[^#]\zs||\ze$', 2), 'yawikiTableOuterBorder'
  AssertEqual SyntaxOf(' \zs|\ze '), 'yawikiTableInnerBorder'
  AssertEqual SyntaxOf('with'), 'yawikiMonospaced'
  AssertEqual SyntaxOf('Borderless'), 'yawikiBold'
