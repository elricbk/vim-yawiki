Given (Basic formatting):
  **bold**
  //italic//
  __underline__

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual 'yawikiBold', SyntaxAt(1, 1)
  AssertEqual 'yawikiItalic', SyntaxAt(2, 1)
  AssertEqual 'yawikiUnderline', SyntaxAt(3, 1)

Given (All level headers):
  = First level header
  == Second level header
  === Third level header
  ==== Fourth level header
  ===== Fifth level header
  ====== Sixth level header

Execute (Set filetype):
  set filetype=yawiki

Then (All headers have expected syntax):
  for i in range(1, 6)
    AssertEqual 'yawikiH' . i, SyntaxAt(i, 1)
  endfor

Given (Multiline code snippet):
  %%(cpp)
  int i = 0;
  %%

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  for i in range(1, line('$'))
    AssertEqual 'yawikiCode', SyntaxAt(i, 1)
  endfor

Given (Multiline raw HTML):
  <#
  <a href="test.html">This is a test</a>
  #>

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  for i in range(1, line('$'))
    AssertEqual 'yawikiHtml', SyntaxAt(i, 1)
  endfor

Given (Cut open/close):
  <{ Hidden region of text
  Blah-blah
  }>

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual 'yawikiCutOpen', SyntaxAt(1, 1)
  AssertEqual 'yawikiCutClose', SyntaxAt(3, 1)

Given (More basic formatting):
  ##Monospaced## font
  --Strikeout-- text
  ++Small++ text
  {{Some command}} with text

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual 'yawikiMonospaced', SyntaxAt(1, 1)
  AssertEqual '', SyntaxAt(1, len(getline(1)) - 1)
  AssertEqual 'yawikiStrikeout', SyntaxAt(2, 1)
  AssertEqual '', SyntaxAt(2, len(getline(1)) - 1)
  AssertEqual 'yawikiSmall', SyntaxAt(3, 1)
  AssertEqual '', SyntaxAt(3, len(getline(1)) - 1)

Given (Example of escaping):
  g+""""+-4.7
  g++-4.7

Execute (Set filetype):
  set filetype=yawiki

Then (No escaped formatting should be present):
  AssertEqual '', SyntaxAt(1, len(getline(1)) - 1)
  AssertEqual 'yawikiSmall', SyntaxAt(2, len(getline(2)) - 1)

Given (String containing "C++"):
  c++-4.7 is cool
  C++-4.7 is cool
  g++-4.7 is not so cool

Execute (Set filetype):
  set filetype=yawiki

Then ('small' formatting should not be started):
  AssertEqual '', SyntaxAt(1, len(getline(1)) - 1)
  AssertEqual '', SyntaxAt(2, len(getline(2)) - 1)
  AssertEqual 'yawikiSmall', SyntaxAt(3, len(getline(3)) - 1)

Given (Links in different formats):
  http://ya.ru
  https://ya.ru
  ((google.com ololo))
  [[yahoo.com ururu]]

Execute (Set filetype):
  set filetype=yawiki

Then (All link parts have correct syntax):
  AssertEqual 'yawikiInlineURL', SyntaxAt(1, 1)
  AssertEqual 'yawikiInlineURL', SyntaxAt(2, 1)
  AssertEqual 'yawikiDelim', SyntaxOf('((')
  AssertEqual 'yawikiLink', SyntaxOf('google\.com')
  AssertEqual 'yawikiLinkTitle', SyntaxOf('ololo')
  AssertEqual 'yawikiDelim', SyntaxOf('))')
  AssertEqual 'yawikiDelim', SyntaxOf('[[')
  AssertEqual 'yawikiLink', SyntaxOf('yahoo\.com')
  AssertEqual 'yawikiLinkTitle', SyntaxOf('ururu')
  AssertEqual 'yawikiDelim', SyntaxOf(']]')

Given (Command syntax on single line):
  {{test}}

Execute (Set filetype):
  set filetype=yawiki

Then (Syntax is set to command):
  AssertEqual 'yawikiCommand', SyntaxOf('test')

Given (Command syntax on multiple lines):
  {{
    test
  }}

Execute (Set filetype):
  set filetype=yawiki

Then (Syntax is not set to command):
  AssertEqual '', SyntaxOf('test')

Given (Question and notes):
  ??Question??
  !!Note!!
  !!(green)GreenNote!!
  !!(red)RedNote!!
  !!(blue)BlueNote!!
  !!(yellow)YellowNote!!
  !!(gray)GrayNote!!
  !!(grey)GreyNote!!

Execute (Set filetype):
  set filetype=yawiki

Then (All lines have expected syntax):
  AssertEqual 'yawikiQuestion', SyntaxOf('Question')
  AssertEqual 'yawikiNote', SyntaxOf('Note')
  AssertEqual 'yawikiGreenNote', SyntaxOf('GreenNote')
  AssertEqual 'yawikiRedNote', SyntaxOf('RedNote')
  AssertEqual 'yawikiBlueNote', SyntaxOf('BlueNote')
  AssertEqual 'yawikiYellowNote', SyntaxOf('YellowNote')
  AssertEqual 'yawikiGrayNote', SyntaxOf('GrayNote')
  AssertEqual 'yawikiGrayNote', SyntaxOf('GreyNote')

Given (Simple login):
  abcd@

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  AssertEqual 'yawikiLoginFirstLetter', SyntaxOf('a')
  AssertEqual 'yawikiLogin', SyntaxOf('bcd@')

Given (Simple login with dash):
  test-login@

Execute (Set filetype):
  set filetype=yawiki

Then (Whole login has expected syntax):
  AssertEqual 'yawikiLoginFirstLetter', SyntaxOf('t')
  AssertEqual 'yawikiLogin', SyntaxOf('est-')
  AssertEqual 'yawikiLogin', SyntaxOf('l')
  AssertEqual 'yawikiLogin', SyntaxOf('ogin@')

Given (Twitter-style login):
  @abcd

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  AssertEqual 'yawikiLoginAt', SyntaxOf('@')
  AssertEqual 'yawikiReversedLogin', SyntaxOf('abcd')

Given (Twitter-style login with dash):
  @test-login

Execute (Set filetype):
  set filetype=yawiki

Then (Whole login has expected syntax):
  AssertEqual 'yawikiLoginAt', SyntaxOf('@')
  AssertEqual 'yawikiReversedLogin', SyntaxOf('test')
  AssertEqual 'yawikiReversedLogin', SyntaxOf('-login')

Given (Login inflection):
  кто:abc
  кого:abc
  кому:abc
  оком:abc

Execute (Set filetype):
  set filetype=yawiki

Then (It has correct syntax):
  for i in range(1, line('$'))
    AssertEqual 'yawikiLoginInflection', SyntaxAt(i, 1)
    AssertEqual 'yawikiInlineLogin', SyntaxAt(i, len(getline(i)) - 1)
    AssertEqual 'yawikiLoginFirstLetter', SyntaxOf(':\zs\w', i)
  endfor

Given (Login inflection with dash):
  кого:test-login

Execute (Set filetype):
  set filetype=yawiki

Then (Whole login has expected syntax):
    AssertEqual 'yawikiLoginInflection', SyntaxAt(1)
    AssertEqual 'yawikiInlineLogin', SyntaxAt(len(getline(1)) - 1)
    AssertEqual 'yawikiLoginFirstLetter', SyntaxOf(':\zst')
    AssertEqual 'yawikiInlineLogin', SyntaxOf('-\zsl')

Given (Quotes in different formats):
  <[
    MultilineQuote
  ]>
  >>> Quote3
  >>  Quote2
  >   Quote1

Execute (Set filetype):
  set filetype=yawiki

Then (All items have expected syntax):
  AssertEqual 'yawikiQuote', SyntaxOf('MultilineQuote')
  AssertEqual 'yawikiQuote1', SyntaxOf('Quote1')
  AssertEqual 'yawikiQuote2', SyntaxOf('Quote2')
  AssertEqual 'yawikiQuoteMore', SyntaxOf('Quote3')

Given (Multiple lines of dashes):
    ----
    -------------

Execute (Set filetype):
  set filetype=yawiki

Then (Line with 4 or more dashes has separator syntax):
  AssertEqual 'yawikiSeparator', SyntaxAt(1, 1)
  AssertEqual 'yawikiSeparator', SyntaxAt(2, 1)

Given (Definition for term without spaces):
  (?Термин Определение с пробелами?)

Execute (Set filetype):
  set filetype=yawiki

Then (All definition parts have expected syntax):
  AssertEqual 'yawikiDefMarker', SyntaxOf('(?')
  AssertEqual 'yawikiDefMarker', SyntaxOf('?)')
  AssertEqual 'yawikiDefHead', SyntaxOf('Термин')
  AssertEqual 'yawikiDef', SyntaxOf('Определение')

Given (Definition for term with spaces):
  (?Многословный термин==Определение с пробелами?)

Execute (Set filetype):
  set filetype=yawiki

Then (All definition parts have expected syntax):
  AssertEqual 'yawikiDefMarker', SyntaxOf('(?')
  AssertEqual 'yawikiDefMarker', SyntaxOf('?)')
  AssertEqual 'yawikiDefMarker', SyntaxOf('==')
  AssertEqual 'yawikiDefHead', SyntaxOf('термин')
  AssertEqual 'yawikiDef', SyntaxOf('Определение')

Given (Multiple definitions on one line):
  (?Термин Определение?) (?Термин==Определение?)

Execute (Set filetype):
  set filetype=yawiki

Then (All definition parts have expected syntax):
  AssertEqual 'yawikiDefHead', SyntaxOf('Термин', 1)
  AssertEqual 'yawikiDef', SyntaxOf('Определение', 1)
  AssertEqual 'yawikiDefHead', SyntaxOf('Термин', 2)
  AssertEqual 'yawikiDef', SyntaxOf('Определение', 2)

Given (Quesiton mark in brackets):
  (?)

Execute (Set filetype):
  set filetype=yawiki

Then (There is no formatting applied):
  AssertEqual '', SyntaxOf('?')

Given (Different ticket numbers):
  TICKET-42
  notticket1
  NOTTICKET2-42
  NOTTICKET3 42

Execute (Set filetype):
  set filetype=yawiki

Then (Correctly formatted ticket has ticket syntax):
  AssertEqual 'yawikiTicket', SyntaxOf('TICKET')
  AssertEqual '', SyntaxOf('notticket1')
  AssertEqual '', SyntaxOf('NOTTICKET2')
  AssertEqual '', SyntaxOf('NOTTICKET3')

Given (HTML entities):
  &mdash;
  &#4242;

Execute (Set filetype):
  set filetype=yawiki

Then (Entities have expected syntax):
  AssertEqual 'yawikiHtmlEntity', SyntaxOf('&', 1)
  AssertEqual 'yawikiHtmlEntity', SyntaxOf('&', 2)

# FIXME: could be expanded to separate tests to more precise checks
Given (Some lists with bullets):
  * Unordered list
    * Second level list
  - Unordered list other format
  1. Ordered list with numbers
  A. Ordered list with big letters
  b. Ordered list with small letters
  2.#42 Ordered list with overriden number
  3.+ Collapsed ordered list item
  XII. Ordered list with roman numerals

Execute (Set filetype):
  set filetype=yawiki

Then (All list bullets/numbers have list bullet syntax):
  for i in range(1, line('$'))
    AssertEqual 'yawikiListBullet', SyntaxOf('^\s*\zs\S\+', i), getline(i)
  endfor

Given (Table formatting):
  #|
  || Table | ##with## | borders ||
  |#

  #||
  || **Borderless** | table ||
  ||#

Execute (Set filetype):
  set filetype=yawiki

Then (Table borders have expected syntax, formatting is supported):
  AssertEqual 'yawikiDelim', SyntaxOf('^#|')
  AssertEqual 'yawikiDelim', SyntaxOf('^|#')
  AssertEqual 'yawikiDelim', SyntaxOf('^#||')
  AssertEqual 'yawikiDelim', SyntaxOf('^||#')
  AssertEqual 'yawikiTableOuterBorder', SyntaxOf('^\zs||\ze[^#]', 1)
  AssertEqual 'yawikiTableOuterBorder', SyntaxOf('[^#]\zs||\ze$', 1)
  AssertEqual 'yawikiTableOuterBorder', SyntaxOf('^\zs||\ze[^#]', 2)
  AssertEqual 'yawikiTableOuterBorder', SyntaxOf('[^#]\zs||\ze$', 2)
  AssertEqual 'yawikiTableInnerBorder', SyntaxOf(' \zs|\ze ')
  AssertEqual 'yawikiMonospaced', SyntaxOf('with')
  AssertEqual 'yawikiBold', SyntaxOf('Borderless')

Given (Mutltiline bold text):
  **this
  is multiline text**
  not bold

Execute (Set filetype):
  set filetype=yawiki

Then (Text has bold syntax):
  AssertEqual 'yawikiBold', SyntaxAt(1, 1)
  AssertEqual 'yawikiBold', SyntaxAt(2, 1)
  AssertEqual '', SyntaxAt(3, 1)

Given (Markup which is not adjacent to text):
  ** bold**
  // italic//
  __ underlined__
  -- strikeout--
  ## monospaced##
  ++ small++

Execute (Set filetype):
  set filetype=yawiki

Then (No markup syntax is set):
  AssertEqual '', SyntaxOf('bold')
  AssertEqual '', SyntaxOf('italic')
  AssertEqual '', SyntaxOf('underlined')
  AssertEqual '', SyntaxOf('strikeout')
  AssertEqual '', SyntaxOf('monospaced')
  AssertEqual '', SyntaxOf('small')

Given (Oneline markup which is used as multiline):
  {{TOC
  }}
  ??Question
  ??
  !!Note
  !!
  ((Link
  ))

Execute (Set filetype):
  set filetype=yawiki

Then (No markup syntax is set):
  AssertEqual '', SyntaxOf('TOC')
  AssertEqual '', SyntaxOf('Question')
  AssertEqual '', SyntaxOf('Note')
  AssertEqual '', SyntaxOf('Link')
